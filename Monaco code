<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        html, body {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        #tabs-container {
            display: flex;
            align-items: center;
            height: 40px;
            background-color: #000000;
            color: white;
            padding: 0 10px;
            position: relative;
            z-index: 1; /* Asegura que la barra de pestañas esté encima de otros elementos */
        }
        .tab {
            margin-right: 10px;
            padding: 10px;
            cursor: pointer;
            background-color: #222222;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .tab:hover {
            background-color: #555;
        }
        .tab.active {
            background-color: #141414;
        }
        .close-tab {
            margin-left: 10px;
            cursor: pointer;
            font-weight: bold;
            color: white;
        }
        .close-tab:hover {
            color: red;
        }
        #add-tab-btn {
            margin-left: 10px;
            background-color: #222222;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s ease;
        }
        #add-tab-btn:hover {
            background-color: #141414;
        }
        #container {
            height: calc(100% - 40px); /* Ajuste para la altura de la barra de pestañas */
            width: 100%;
            position: relative;
            display: flex;
            flex-direction: column; /* Para asegurarnos de que los editores se apilen correctamente */
            overflow: hidden;
        }
        .editor-container {
            width: 100%;
            height: 100%; /* Hace que el editor ocupe toda la altura disponible */
            display: none; /* Oculta los editores por defecto */
        }
    </style>
</head>
<body>
    <div id="tabs-container">
        <button id="add-tab-btn" onclick="addTab()">+</button>
    </div>
    <div id="container"></div>

    <script src="./vs/loader.js" type="text/javascript"></script>
    <script type="text/javascript">
        var editors = {}; // Objeto para almacenar editores por ID de tab
        var tabCount = 0; // Empezamos sin tabs

        require(["./vs/editor/editor.main"], function () {
            // Define a custom theme with your desired background color
            monaco.editor.defineTheme('myCustomTheme', {
                base: 'vs-dark', // or 'vs' for light theme
                inherit: true,
                rules: [],
                colors: {
                    'editor.background': '#000000', // Use hex color for RGB(0, 0, 0)
                    'editor.foreground': '#FFFFFF' // Adjust as needed for foreground color
                }
            });

            // Load saved tabs from localStorage
            loadTabs();

            // Crear el primer tab y editor (sin la pestaña "Main")
            if (tabCount === 0) {
                addTab(); // Llama a la función para agregar el primer tab si no hay ninguno
            }
        });

        function getValue(tabId) {
            return editors[tabId] ? editors[tabId].getValue() : '';
        }

        function setValue(tabId, value) {
            if (editors[tabId]) {
                editors[tabId].setValue(value);
            }
        }

        // Add new tab
        function addTab() {
            tabCount++;
            var tabId = 'tab' + tabCount;
            var newTab = document.createElement('div');
            newTab.className = 'tab';
            newTab.id = tabId;
            newTab.innerHTML = 'Tab ' + tabCount;

            // Agregar botón de cierre solo si no es el primer tab
            if (tabCount !== 1) {
                newTab.innerHTML += ' <span class="close-tab" onclick="closeTab(\'' + tabId + '\')">x</span>';
            }

            newTab.onclick = function() { activateTab(tabId); };
            document.getElementById('tabs-container').insertBefore(newTab, document.getElementById('add-tab-btn'));

            // Create a new editor for the new tab
            createEditor(tabId);

            // Move the button to the right
            updateButtonPosition();

            // Make the first tab active by default
            if (tabCount === 1) {
                activateTab(tabId);
            }

            // Save tabs to localStorage
            saveTabs();
        }

        // Close tab
        function closeTab(tabId) {
            if (tabId === 'tab1') {
                return; // No permitir que se cierre el primer tab
            }

            // Destroy the editor for this tab
            if (editors[tabId]) {
                editors[tabId].dispose();
                delete editors[tabId];
            }

            var tab = document.getElementById(tabId);
            tab.remove();
            if (document.querySelector('.tab.active') === null) {
                activateTab('tab1'); // Re-activate the first tab if no other tabs are open
            }

            // Move the button to the right after removing a tab
            updateButtonPosition();

            // Save tabs to localStorage
            saveTabs();
        }

        // Update the position of the add tab button
        function updateButtonPosition() {
            var button = document.getElementById('add-tab-btn');
            var tabs = document.querySelectorAll('.tab');
            button.style.left = (tabs.length * 60) + 'px'; // Adjust button position based on number of tabs
        }

        // Create Monaco editor for a given tab
        function createEditor(tabId) {
            var editorContainer = document.createElement('div');
            editorContainer.className = 'editor-container';
            editorContainer.id = 'editor-' + tabId;
            document.getElementById('container').appendChild(editorContainer);

            // Create the Monaco editor inside the container
            editors[tabId] = monaco.editor.create(editorContainer, {
                value: '',
                language: "lua",
                theme: "myCustomTheme", // Use the custom theme here
                dragAndDrop: true,
                links: true,
                minimap: {
                    enabled: false,
                },
                showFoldingControls: "always",
                smoothScrolling: true,
                automaticLayout: true, // Asegura que el editor se ajuste automáticamente al tamaño del contenedor
            });

            // Save the content of the editor every 2 seconds
            setInterval(function() {
                saveTabs();
            }, 2000); // Guardar cada 2 segundos
        }

        // Activate tab
        function activateTab(tabId) {
            var tabs = document.querySelectorAll('.tab');
            tabs.forEach(function(tab) {
                tab.classList.remove('active');
            });
            document.getElementById(tabId).classList.add('active');
            
            // Hide all editors
            var editorsContainer = document.querySelectorAll('.editor-container');
            editorsContainer.forEach(function(container) {
                container.style.display = 'none';
            });

            // Show the editor for the active tab
            document.getElementById('editor-' + tabId).style.display = 'block';
        }

        // Save tabs and their content to localStorage
        function saveTabs() {
            var tabsData = [];
            var tabs = document.querySelectorAll('.tab');
            tabs.forEach(function(tab) {
                var tabId = tab.id;
                tabsData.push({
                    id: tabId,
                    title: tab.innerText.replace(' x', ''),
                    content: getValue(tabId)
                });
            });
            localStorage.setItem('tabsData', JSON.stringify(tabsData));
        }

        // Load saved tabs and their content from localStorage
        function loadTabs() {
            var tabsData = JSON.parse(localStorage.getItem('tabsData'));
            if (tabsData) {
                tabsData.forEach(function(tabData, index) {
                    tabCount = index + 1; // Adjust tab count based on saved data
                    var newTab = document.createElement('div');
                    newTab.className = 'tab';
                    newTab.id = tabData.id;
                    newTab.innerHTML = tabData.title;

                    if (tabCount !== 1) {
                        newTab.innerHTML += ' <span class="close-tab" onclick="closeTab(\'' + tabData.id + '\')">x</span>';
                    }

                    newTab.onclick = function() { activateTab(tabData.id); };
                    document.getElementById('tabs-container').insertBefore(newTab, document.getElementById('add-tab-btn'));

                    // Create a new editor for the tab and set its value
                    createEditor(tabData.id);
                    setValue(tabData.id, tabData.content);
                });

                // Auto-select Tab 1 after loading
                activateTab('tab1');
            }
        }

        // Inicializar el primer tab
        activateTab('tab1');
    </script>
</body>
</html>
